/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestRouter,
  TestRouterInterface,
} from "../../../contracts/utils/TestRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "chainSelector",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104d5806100206000396000f3fe60806040526004361061003f5760003560e01c806320487ded1461004457806396f4e9f91461007a578063a48a905814610090578063fbca3b74146100c1575b600080fd5b34801561005057600080fd5b5061006761005f3660046102de565b600192915050565b6040519081526020015b60405180910390f35b6100676100883660046103db565b600092915050565b34801561009c57600080fd5b506100b16100ab366004610430565b50600190565b6040519015158152602001610071565b3480156100cd57600080fd5b506100ef6100dc366004610430565b5060408051600081526020810190915290565b6040516100719190610452565b803567ffffffffffffffff8116811461011457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561015257610152610119565b60405290565b60405160a0810167ffffffffffffffff8111828210171561015257610152610119565b604051601f8201601f1916810167ffffffffffffffff811182821017156101a4576101a4610119565b604052919050565b600082601f8301126101bd57600080fd5b813567ffffffffffffffff8111156101d7576101d7610119565b6101ea601f8201601f191660200161017b565b8181528460208386010111156101ff57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461011457600080fd5b600082601f83011261024457600080fd5b8135602067ffffffffffffffff82111561026057610260610119565b61026e818360051b0161017b565b82815260069290921b8401810191818101908684111561028d57600080fd5b8286015b848110156102d357604081890312156102aa5760008081fd5b6102b261012f565b6102bb8261021c565b81528185013585820152835291830191604001610291565b509695505050505050565b600080604083850312156102f157600080fd5b6102fa836100fc565b9150602083013567ffffffffffffffff8082111561031757600080fd5b9084019060a0828703121561032b57600080fd5b610333610158565b82358281111561034257600080fd5b61034e888286016101ac565b82525060208301358281111561036357600080fd5b61036f888286016101ac565b60208301525060408301358281111561038757600080fd5b61039388828601610233565b6040830152506103a56060840161021c565b60608201526080830135828111156103bc57600080fd5b6103c8888286016101ac565b6080830152508093505050509250929050565b600080604083850312156103ee57600080fd5b6103f7836100fc565b9150602083013567ffffffffffffffff81111561041357600080fd5b830160a0818603121561042557600080fd5b809150509250929050565b60006020828403121561044257600080fd5b61044b826100fc565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156104935783516001600160a01b03168352928401929184019160010161046e565b5090969550505050505056fea264697066735822122066a787c042c29cd011e58c2c04e43cc8b52f0064b975cb9a42c132b9b54a761464736f6c63430008130033";

type TestRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRouter__factory extends ContractFactory {
  constructor(...args: TestRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestRouter__factory {
    return super.connect(runner) as TestRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRouterInterface {
    return new Interface(_abi) as TestRouterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestRouter {
    return new Contract(address, _abi, runner) as unknown as TestRouter;
  }
}
