/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICrossChainVickreyAuctionErrors,
  ICrossChainVickreyAuctionErrorsInterface,
} from "../../contracts/ICrossChainVickreyAuctionErrors";

const _abi = [
  {
    inputs: [],
    name: "AuctionIsNotFinishedError",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionIsNotInitializedError",
    type: "error",
  },
  {
    inputs: [],
    name: "BidPeriodOngoingError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "bidPeriod",
        type: "uint32",
      },
    ],
    name: "BidPeriodTooShortError",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotWithdrawError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "CantMintNftTokenError",
    type: "error",
  },
  {
    inputs: [],
    name: "CounterOfUnrepliedChainsMustBeZeroError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
    ],
    name: "CrossChainRivalAlreadyInitError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
    ],
    name: "CrossChainRivalDoesntExistError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToTransferEthError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToTransferTokenError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCollateralValueError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDestTokenArrayError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endOfBiddingPeriod",
        type: "uint32",
      },
    ],
    name: "InvalidEndOfBiddingPeriodError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endOfInitPeriod",
        type: "uint32",
      },
    ],
    name: "InvalidEndOfInitPeriodError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endOfReplyPeriod",
        type: "uint32",
      },
    ],
    name: "InvalidEndOfReplyPeriodError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "endOfRevealPeriod",
        type: "uint32",
      },
    ],
    name: "InvalidEndOfRevealPeriodError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMinimumBidValueError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "bidHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "InvalidOpeningError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "startTime",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "curTime",
        type: "uint256",
      },
    ],
    name: "InvalidStartTimeError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "NftTokenBalanceIsZeroError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowedError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInBidPeriodError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInReplyPeriodError",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInRevealPeriodError",
    type: "error",
  },
  {
    inputs: [],
    name: "ReplyPeriodOngoingError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "replyPeriod",
        type: "uint32",
      },
    ],
    name: "ReplyPeriodTooShortError",
    type: "error",
  },
  {
    inputs: [],
    name: "RevealPeriodOngoingError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "revealPeriod",
        type: "uint32",
      },
    ],
    name: "RevealPeriodTooShortError",
    type: "error",
  },
  {
    inputs: [],
    name: "UnrevealedBidError",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroCommitmentError",
    type: "error",
  },
] as const;

export class ICrossChainVickreyAuctionErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ICrossChainVickreyAuctionErrorsInterface {
    return new Interface(_abi) as ICrossChainVickreyAuctionErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICrossChainVickreyAuctionErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ICrossChainVickreyAuctionErrors;
  }
}
